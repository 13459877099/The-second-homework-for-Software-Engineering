#include <bits/stdc++.h>

using namespace std;

/*定义题目要求的32个关键字*/
const string Keywords[32] =
{
	"auto","break","case","char",
	"const","continue","default","do",
	"double","else","enum","extern",
	"float","for","goto","if",
	"int","long","register","return",
	"short","signed","sizeof","static",
	"struct","switch","typedef","union",
	"unsigned","void","volatile","while",
};

int case_each = 0; //用于统计每个switch下case的个数

/*输入操作类*/
class input_data
{
public:
	string address;
	int finish_level=1;
	void Input();  //用于数据的输入
	void AddresssAdjustment(string add);  //用于输入的地址调整
	string Read_Cfile(string add); //用于读取cpp文件，并将其转换成字符串
};

/*输出操作类*/
class output_data
{
public:
	int total = 0; //总和
	int switch_count = 0; //switch个数
	int case_count[1000] = {0}; //case个数
	int if_else_count = 0;  //if-else个数
	int if_else_if_else_count = 0; //if-else_if-else个数
	void Output(int level);  //用于结果的输出
};

/*数据分析类*/
class Data_analysis
{
public:
	void Comparison(string temp, output_data res); //用于与关键词库进行比对
	void Analyze_words(string temp, output_data res); //用于单词的分析和消除注释与引号的影响
};


/*输入函数*/
void input_data::Input()
{
	cout << "请输入文件的路径地址" << endl;
	cin >> address;
	cout << "请输入您需要的完成等级" << endl;
	cin >> finish_level;
}

/*输入地址调整函数*/
void input_data::AddresssAdjustment(string address)
{
	int s;
	s = address.length();
	stack <char> n;

	while (s--)
	{
		n.push(address[s]);
	}

	address = "";

	while (!n.empty())
	{
		if (n.top() == '\\')
		{
			address += '\\';
		}
		else
		{
			address += n.top();
		}

		n.pop();
	}
}

/*cpp文件读取函数*/
string input_data::Read_Cfile(string address)
{
	fstream C_file; //读取路径
	stringstream buffer; //缓冲

	C_file.open(address, ios::in);
	buffer << C_file.rdbuf();
	C_file.close();
	return buffer.str();
}

/*分析单词和去除注释与引号函数*/
void Data_analysis::Analyze_words(string temp, output_data res)
{
	int len = temp.length();
	int i;
	string str = "\0";

	for (i = 0; i < len; i++)
	{
		if (temp[i] == '/' && temp[i + 1] == '/')  //现在消除“//”的影响
		{
			while (i++ && i < 1)
			{
				if (temp[i] == '\n')
					break;
			}
		}
		else if (temp[i] == '/' && temp[i + 1] == '*') //现在消除“/**/”的影响
		{
			while (i++)
			{
				if (temp[i] == '/' && temp[i - 1] == '*')
					break;
			}
		}
		else if (temp[i] == '"') //现在消除“""”的影响,目前无法解决引号中还有引号或者是奇数个引号的问题
		{
			while (i++)
			{
				if (temp[i] == '"')
					break;
			}
		}
		else //接下来是用于分析单词，并将单词送进Comparison函数进行关键词比对
		{
			if (isalpha(temp[i])) //isalpha用于检测代码段是否为字母
			{
				str += temp[i];
				Comparison(str,res);
			}
			else
			{
				temp = '\0'; //分析完单词后初始化
			}
		}
	}
}

/*关键词比对与结果计数函数*/
void Data_analysis::Comparison(string temp, output_data res) //核心代码参考同学的,暂时未实现if_else的判断
{
	for (int i = 0; i < 32; i++)
	{
		if (temp == Keywords[i])
		{
			res.total++;
			break;
		}
	}
}


/*结果输出函数*/
void output_data::Output(int level)
{
	if (level > 4 && level < 1)
	{
		cout << "ERROR" << endl;
		exit(0);
	}

	if (level >= 1)
	{
		cout << endl;
		cout << "Total num: " << total << endl;
	}

	if (level >= 2)
	{
		cout << "Switch num: " << switch_count << endl;
		cout << "Case num: ";
		for (int i = 0; i < case_each; i++)
		{
			cout << case_count[i + 1] << " " << endl;
		}
	}

	if (level >= 3)
	{
		cout << "if-else num: " << if_else_count << endl;
	}

	if (level >= 4)
	{
		cout << "if-else_if-else num: " << if_else_if_else_count << endl;
	}
}

/*主函数*/
int main()
{
	input_data In;
	In.Input();
	In.AddresssAdjustment(In.address);

	string data;
	data = In.Read_Cfile(In.address);

	output_data Out;
	Data_analysis ana;

	ana.Analyze_words(data,Out);

	Out.Output(In.finish_level);

	system("pause");
	return 0;
}
